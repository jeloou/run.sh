#!/bin/bash

USAGE=$(cat <<EOF
Usage: $0 [options]

Options:
  -d, --daemon
  -v, --version
  -h, --help
EOF
)

# Maven will replace project.name with your project name. If the project has not 
# been compiled yet, the script will throw an error.
IS_PACKAGED='@project.name@'
if [ "$IS_PACKAGED" != '<your project name>' ]; then
  cat >&2 <<EOF
Error: you must build the project with Maven before you can run it.
EOF
  exit 1
fi

# This will resolve the symbolic link, if any.
SCRIPT="$0"
while [ -h "$SCRIPT" ] ; do
  ls=`ls -ld "$SCRIPT"`
  # Drop everything prior to ->
  
  link=`expr "$ls" : '.*-> \(.*\)$'`
  if expr "$link" : '/.*' > /dev/null; then
    SCRIPT="$link"
  else
    SCRIPT=`dirname "$SCRIPT"`/"$link"
  fi
done

PROJECT_HOME=`dirname $SCRIPT`/..
PROJECT_HOME=`cd "$PROJECT_HOME"; pwd`

if [ -x "$JAVA_HOME/bin/java" ]; then
  JAVA="$JAVA_HOME/bin/java"
else
  JAVA=`which java`
fi

if [ ! -x "$JAVA" ]; then
  echo "Couldn't find any Java binary" >&2
  exit 1
fi

PREFIX='@project.name@'
UPPER_PREFIX=$(tr '[:lower:]' '[:upper:]' <<< $PREFIX)

# PROJECT_CLASSPATH contains the name of your classes dir. This will
# throw and error if the variable has not been created.
PROJECT_CLASSPATH=$UPPER_PREFIX"_CLASSPATH"
PROJECT_INCLUDE=$UPPER_PREFIX"_INCLUDE"

if [ -z `eval "echo $"$PROJECT_INCLUDE` ]; then
  for include in /usr/share/@project.name@/@project.name@.in.sh \
                 /usr/local/share/@project.name@/@project.name@.in.sh \
                 /opt/@project.name@/@project.name@.in.sh \
                 ~/.@project.name@.in.sh \
                 "`dirname $0`"/@project.name@.in.sh; do
    if [ -r "$include" ]; then
      . "$include"
      break
    fi
  done
elif [ -r "`eval "echo $"$PROJECT_INCLUDE`" ]; then
  . "`eval "echo $"$PROJECT_INCLUDE`"
fi

if [ -z `eval "echo $"$PROJECT_CLASSPATH` ]; then
  echo "You must set the $PROJECT_CLASSPATH var" >&2
  exit 1
fi

PROJECT_CLASSPATH=`eval "echo $"$PROJECT_CLASSPATH`
re="-*([a-zA-Z])*,* *--([a-zA-Z]+)+ *(<[a-zA-Z]+>)*"
properties=""
add_property() {
  properties="$properties -D$PREFIX.$1=$2"
}

has_property() {
  if grep -q -v "D$PREFIX.$1" <<< $properties; then
    return 1
  fi
  return 0
}

get_option() {
  if [ -z $2 ]; then
    echo $(grep -o -E "(-[a-zA-Z]{1}, )?-{2}"$1"{1,}( <[a-zA-Z]>)?" <<< $USAGE)
    return
  fi
  
  echo $(grep -o -E "\-"$1"{1}, -{2}[a-zA-Z]{1,}( <[a-zA-Z]>)?" <<< $USAGE)
}

needs_value() {
  if [[ $(get_option "$1") =~ $re ]]; then
    if [ -n "${BASH_REMATCH[3]}" ]; then
      return 0
    fi
    return 1
  fi
}

usage() {
  echo "$USAGE"
}

version() {
  echo "@project.version@"
}

run() {
  daemon=$1
  properties=$2
    
  if [ "x$daemon" = "x" ]; then
    exec "$JAVA" -D@project.name@.path.home="$PROJECT_HOME" -cp "$PROJECT_CLASSPATH" $properties \
	@project.main@
  else
    exec "$JAVA" -D@project.name@.path.home="$PROJECT_HOME" -cp "$PROJECT_CLASSPATH" $properties \
	@project.main@ <&- &
    
    return $?
  fi
}

ARGV=""
while [ $# -gt 0 ]
do
  case $1 in
    --*)
	 k="${1#--}"
         if [[ -z `get_option "$k"` ]]; then
	   cat >&2 <<EOF
Error: You're passing the invalid option --$k to the script
EOF
	   exit 1
	 fi
	 
         if ! `has_property "$k"`; then
           v='yes'
           if `needs_value "$k"`; then
	     if [[ "$2" == -* ]] || [ -z $2 ]; then
	       cat >&2 <<EOF
Error: The option --$k was expecting a value
EOF
	       exit 1
	     fi
             v=$2
           fi
           add_property "$k" "$v"
	 fi
	 shift
         ;;
     *) 
        ARGV="$ARGV $1"; shift
  esac
done

if `has_property 'version'`; then
  version
  exit 0
fi

if `has_property 'help'`; then
  usage
  exit 0
fi

# Automatically generates the getopt opstring using USAGE
options=$(grep -o -E "\-[a-zA-Z]{1}, -{2}[a-zA-Z]{1,}( <[a-zA-Z]>)?" <<< $USAGE)
OLD_IFS=$IFS
IFS=$'\n' options=($options)
IFS=$OLD_IFS

optstring=""
for option in "${options[@]}"
do
  if [[ $option =~ $re ]]; then
    optstring="$optstring${BASH_REMATCH[1]}"
    if [ -n "${BASH_REMATCH[3]}" ]; then
      optstring="$optstring:"
    fi
  fi
done

optstring=$optstring"D:"
e=$(getopt $optstring $ARGV 2>&1 > /dev/null)
if [ -n "$e" ]; then
  o=$(sed "s/.*'\(.*\)'/\1/" <<< $e)
  if [ -n "`grep -o "requires" <<< $e`" ]; then
    cat >&2 <<EOF
Error: The option -$o was expecting a value
EOF
    exit 1
  fi
  
  cat >&2 <<EOF
Error: You're passing the invalid option -$o to the script
EOF
  exit 1
fi

args=`getopt $optstring $ARGV`
eval set -- "$args"

while true; do
  case $1 in
    -v) 
        version
	exit 0
	;;
    -h)
        usage
	exit 0
	;;
    -d) 
        daemon='yes'
	shift
	;;
    -D)
	properties="$properties -D$2"
        shift 2
        ;;
    --) 
	shift
	break
	;;
     *)
        k="${1#-}"
        if [[ $(get_option "$k" 'true') =~ $re ]]; then
	  k="${BASH_REMATCH[2]}"
	  if ! `has_property "$k"`; then
            if [ -n "${BASH_REMATCH[3]}" ]; then
	      add_property "$k" "$2"
	      shift 2
	    else
	      add_property "$k" 'yes'
	      shift
	    fi
	  else
	    shift
	  fi
	fi
	;;
  esac
done

run "$daemon" "$properties"
exit $?